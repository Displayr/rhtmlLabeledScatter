{"version":3,"file":"PlotColors.es6.js","names":[],"mappings":"","sources":["PlotColors.es6.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.PlotColors = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// NB local require statements cannot be enabled until the ES6 porting is complete\n// const Utils = require('./utils/Utils.es6')\n/* global Utils */\n\n/* To Refactor:\n *   * the constructor of PlotColors has a side effect that creates the legendGroup used by PlotData etc\n *\n */\n\n// This class assigns colors to the plot data\n// If group array is supplied, it will couple the array with the color wheel\n// If no group array is supplied, colors are rotated through the color wheel\nvar PlotColors = function () {\n  function PlotColors(plotData) {\n    var _this = this;\n\n    _classCallCheck(this, PlotColors);\n\n    this.plotData = plotData;\n    this.plotData.legendGroups = [];\n\n    this.groupToColorMap = {};\n\n    var uniqueGroups = _.uniq(this.plotData.group || []);\n    _(uniqueGroups).each(function (groupName, index) {\n      var newColor = _this.getNewColor(index);\n      _this.plotData.legendGroups.push({\n        text: groupName,\n        color: newColor,\n        r: _this.plotData.legendDim.ptRadius,\n        anchor: 'start',\n        fillOpacity: _this.getFillOpacity(_this.plotData.transparency)\n      });\n      _this.groupToColorMap[groupName] = newColor;\n    });\n  }\n\n  PlotColors.prototype.getColorFromGroup = function getColorFromGroup(group) {\n    return this.groupToColorMap[group];\n  };\n\n  PlotColors.prototype.getNewColor = function getNewColor(index) {\n    return this.plotData.colorWheel[index % this.plotData.colorWheel.length];\n  };\n\n  PlotColors.prototype.getColor = function getColor(i) {\n    if (Utils.isArr(this.plotData.group)) {\n      return this.getColorFromGroup(this.plotData.group[i]);\n    } else {\n      return this.getNewColor(0); // takes the first color in the color wheel since all pts in same grp\n    }\n  };\n\n  PlotColors.prototype.getFillOpacity = function getFillOpacity(transparency) {\n    if (Utils.isNum(transparency)) {\n      return transparency;\n    } else if (Utils.isArr(this.plotData.Z)) {\n      return 0.3; // If data has a Z dimension, then default to 0.3 (semi-transparent)\n    } else {\n      return 1; // If data has no Z dimension, then default to 1 (opaque)\n    }\n  };\n\n  return PlotColors;\n}();\n\nmodule.exports = PlotColors;\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}