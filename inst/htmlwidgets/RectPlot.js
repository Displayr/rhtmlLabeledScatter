// Generated by CoffeeScript 1.8.0
var RectPlot;

RectPlot = (function() {
  var drawDimensionMarkers, _calcViewBoxDim, _normalizeXCoords, _normalizeYCoords;

  function RectPlot(width, height, X, Y, svg) {
    this.svg = svg;
    this.viewBoxDim = _calcViewBoxDim(X, Y, width, height);
    this.viewBoxDim['x'] = width / 5;
    this.viewBoxDim['y'] = height / 5;
  }

  RectPlot.prototype.getViewBoxDim = function() {
    return this.viewBoxDim;
  };

  RectPlot.prototype.draw = function(minX, maxX, minY, maxY) {
    this.svg.append('rect').attr('class', 'plot-viewbox').attr('x', this.viewBoxDim.x).attr('y', this.viewBoxDim.y).attr('width', this.viewBoxDim.width).attr('height', this.viewBoxDim.height).attr('fill', 'none').attr('stroke', 'black').attr('stroke-width', '1px');
    return drawDimensionMarkers(minX, maxX, minY, maxY, this.viewBoxDim, this.svg);
  };

  drawDimensionMarkers = function(minX, maxX, minY, maxY, viewBoxDim, svg) {
    var between, colsNegative, colsPositive, dimensionMarkerLabelStack, dimensionMarkerLeaderStack, dimensionMarkerStack, i, originAxis, originX, originY, pushDimensionMarker, rowsNegative, rowsPositive, val, x1, x2, y1, y2;
    originX = _normalizeXCoords(0, minX, maxX, viewBoxDim);
    originY = _normalizeYCoords(0, minY, maxY, viewBoxDim);
    originAxis = [
      {
        x1: viewBoxDim.x,
        y1: originY,
        x2: viewBoxDim.x + viewBoxDim.width,
        y2: originY
      }, {
        x1: originX,
        y1: viewBoxDim.y,
        x2: originX,
        y2: viewBoxDim.y + viewBoxDim.height
      }
    ];
    svg.selectAll('.origin').data(originAxis).enter().append('line').attr('class', 'origin').attr('x1', function(d) {
      return d.x1;
    }).attr('y1', function(d) {
      return d.y1;
    }).attr('x2', function(d) {
      return d.x2;
    }).attr('y2', function(d) {
      return d.y2;
    }).attr('stroke-width', 1).attr('stroke', 'black').style('stroke-dasharray', '3, 3');
    between = function(num, min, max) {
      return num > min && num < max;
    };
    colsPositive = 0;
    colsNegative = 0;
    i = 0.25;
    while (between(i, minX, maxX) || between(-i, minX, maxX)) {
      if (between(i, minX, maxX)) {
        colsPositive++;
      }
      if (between(-i, minX, maxX)) {
        colsNegative++;
      }
      i += 0.25;
    }
    rowsPositive = 0;
    rowsNegative = 0;
    i = 0.25;
    while (between(i, minY, maxY) || between(-i, minY, maxY)) {
      if (between(i, minY, maxY)) {
        rowsNegative++;
      }
      if (between(-i, minY, maxY)) {
        rowsPositive++;
      }
      i += 0.25;
    }
    dimensionMarkerStack = [];
    dimensionMarkerLeaderStack = [];
    dimensionMarkerLabelStack = [];
    pushDimensionMarker = function(type, x1, y1, x2, y2, label) {
      var labelHeight, leaderLineLen, numShown;
      leaderLineLen = 5;
      labelHeight = 15;
      numShown = label.toFixed(1);
      if (type === 'c') {
        dimensionMarkerLeaderStack.push({
          x1: x1,
          y1: y2,
          x2: x1,
          y2: y2 + leaderLineLen
        });
        dimensionMarkerLabelStack.push({
          x: x1,
          y: y2 + leaderLineLen + labelHeight,
          label: numShown,
          anchor: 'middle'
        });
      }
      if (type === 'r') {
        dimensionMarkerLeaderStack.push({
          x1: x1 - leaderLineLen,
          y1: y1,
          x2: x1,
          y2: y2
        });
        return dimensionMarkerLabelStack.push({
          x: x1 - leaderLineLen,
          y: y2 + labelHeight / 3,
          label: numShown,
          anchor: 'end'
        });
      }
    };
    pushDimensionMarker('r', originAxis[0].x1, originAxis[0].y1, originAxis[0].x2, originAxis[0].y2, 0);
    pushDimensionMarker('c', originAxis[1].x1, originAxis[1].y1, originAxis[1].x2, originAxis[1].y2, 0);
    i = 0;
    while (i < Math.max(colsPositive, colsNegative)) {
      if (i < colsPositive) {
        val = (i + 1) * 0.25;
        x1 = _normalizeXCoords(val, minX, maxX, viewBoxDim);
        y1 = viewBoxDim.y;
        x2 = _normalizeXCoords(val, minX, maxX, viewBoxDim);
        y2 = viewBoxDim.y + viewBoxDim.height;
        dimensionMarkerStack.push({
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        });
        if (i % 2) {
          pushDimensionMarker('c', x1, y1, x2, y2, val);
        }
      }
      if (i < colsNegative) {
        val = -(i + 1) * 0.25;
        x1 = _normalizeXCoords(val, minX, maxX, viewBoxDim);
        y1 = viewBoxDim.y;
        x2 = _normalizeXCoords(val, minX, maxX, viewBoxDim);
        y2 = viewBoxDim.y + viewBoxDim.height;
        dimensionMarkerStack.push({
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        });
        if (i % 2) {
          pushDimensionMarker('c', x1, y1, x2, y2, val);
        }
      }
      i++;
    }
    i = 0;
    while (i < Math.max(rowsPositive, rowsNegative)) {
      x1 = y1 = x2 = y2 = 0;
      if (i < rowsPositive) {
        val = -(i + 1) * 0.25;
        x1 = viewBoxDim.x;
        y1 = _normalizeYCoords(val, minY, maxY, viewBoxDim);
        x2 = viewBoxDim.x + viewBoxDim.width;
        y2 = _normalizeYCoords(val, minY, maxY, viewBoxDim);
        dimensionMarkerStack.push({
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        });
        if (i % 2) {
          pushDimensionMarker('r', x1, y1, x2, y2, val);
        }
      }
      if (i < rowsNegative) {
        val = (i + 1) * 0.25;
        x1 = viewBoxDim.x;
        y1 = _normalizeYCoords(val, minY, maxY, viewBoxDim);
        x2 = viewBoxDim.x + viewBoxDim.width;
        y2 = _normalizeYCoords(val, minY, maxY, viewBoxDim);
        dimensionMarkerStack.push({
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2
        });
        if (i % 2) {
          pushDimensionMarker('r', x1, y1, x2, y2, val);
        }
      }
      i++;
    }
    svg.selectAll('.dim-marker').data(dimensionMarkerStack).enter().append('line').attr('class', 'dim-marker').attr('x1', function(d) {
      return d.x1;
    }).attr('y1', function(d) {
      return d.y1;
    }).attr('x2', function(d) {
      return d.x2;
    }).attr('y2', function(d) {
      return d.y2;
    }).attr('stroke-width', 0.2).attr('stroke', 'grey');
    svg.selectAll('.dim-marker-leader').data(dimensionMarkerLeaderStack).enter().append('line').attr('class', 'dim-marker-leader').attr('x1', function(d) {
      return d.x1;
    }).attr('y1', function(d) {
      return d.y1;
    }).attr('x2', function(d) {
      return d.x2;
    }).attr('y2', function(d) {
      return d.y2;
    }).attr('stroke-width', 1).attr('stroke', 'black');
    return svg.selectAll('.dim-marker-label').data(dimensionMarkerLabelStack).enter().append('text').attr('x', function(d) {
      return d.x;
    }).attr('y', function(d) {
      return d.y;
    }).attr('font-family', 'Arial Narrow').text(function(d) {
      return d.label;
    }).attr('text-anchor', function(d) {
      return d.anchor;
    });
  };

  _calcViewBoxDim = function(X, Y, width, height) {
    return {
      width: width / 2,
      height: height / 2,
      rangeX: Math.max.apply(null, X) - Math.min.apply(null, X),
      rangeY: Math.max.apply(null, Y) - Math.min.apply(null, Y)
    };
  };

  _normalizeXCoords = function(Xcoord, minX, maxX, viewBoxDim) {
    return (Xcoord - minX) / (maxX - minX) * viewBoxDim.width + viewBoxDim.x;
  };

  _normalizeYCoords = function(Ycoord, minY, maxY, viewBoxDim) {
    return (Ycoord - minY) / (maxY - minY) * viewBoxDim.height + viewBoxDim.y;
  };

  return RectPlot;

})();
