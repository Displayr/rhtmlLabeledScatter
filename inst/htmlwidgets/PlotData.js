// Generated by CoffeeScript 1.8.0
var PlotData;

PlotData = (function() {
  function PlotData(X, Y, group, label, viewBoxDim) {
    this.X = X;
    this.Y = Y;
    this.group = group;
    this.label = label;
    this.viewBoxDim = viewBoxDim;
    if (this.X.length === this.Y.length) {
      this.len = X.length;
      this.normalizeData();
      this.initDataArrays();
    } else {
      throw new Error("Inputs X and Y lengths do not match!");
    }
  }

  PlotData.prototype.normalizeData = function() {
    var i, threshold, _results;
    this.minX = Infinity;
    this.maxX = -Infinity;
    this.minY = Infinity;
    this.maxY = -Infinity;
    i = 0;
    while (i < this.len) {
      if (this.minX > this.X[i]) {
        this.minX = this.X[i];
      }
      if (this.maxX < this.X[i]) {
        this.maxX = this.X[i];
      }
      if (this.minY > this.Y[i]) {
        this.minY = this.Y[i];
      }
      if (this.maxY < this.Y[i]) {
        this.maxY = this.Y[i];
      }
      i++;
    }
    threshold = 0.05;
    i = 0;
    _results = [];
    while (i < this.len) {
      this.X[i] = threshold + (this.X[i] - this.minX) / (this.maxX - this.minX) * (1 - 2 * threshold);
      this.Y[i] = threshold + (this.Y[i] - this.minY) / (this.maxY - this.minY) * (1 - 2 * threshold);
      _results.push(i++);
    }
    return _results;
  };

  PlotData.prototype.initDataArrays = function() {
    var color, group, i, newColor, _results;
    this.pts = [];
    this.lab = [];
    this.anc = [];
    this.legend = [];
    color = new RColor;
    group = this.group;
    i = 0;
    _results = [];
    while (i < this.len) {
      if (!(_.some(this.legend, function(e) {
        return e.text === group[i];
      }))) {
        newColor = color.get(true, 0.9, 0.9);
        this.legend.push({
          text: this.group[i],
          color: newColor
        });
      }
      this.pts.push({
        x: this.X[i] * this.viewBoxDim.width + this.viewBoxDim.x,
        y: this.Y[i] * this.viewBoxDim.height + this.viewBoxDim.y,
        r: 2,
        label: this.label[i],
        labelX: this.X[i] * this.viewBoxDim.width + this.viewBoxDim.x,
        labelY: this.Y[i] * this.viewBoxDim.height + this.viewBoxDim.y,
        group: this.group[i],
        color: newColor
      });
      this.lab.push({
        x: this.X[i] * this.viewBoxDim.width + this.viewBoxDim.x,
        y: this.Y[i] * this.viewBoxDim.height + this.viewBoxDim.y,
        text: this.label[i]
      });
      this.anc.push({
        x: this.X[i] * this.viewBoxDim.width + this.viewBoxDim.x,
        y: this.Y[i] * this.viewBoxDim.height + this.viewBoxDim.y,
        r: 2
      });
      _results.push(i++);
    }
    return _results;
  };

  return PlotData;

})();
