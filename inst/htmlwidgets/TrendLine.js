// Generated by CoffeeScript 1.8.0
var TrendLine,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

TrendLine = (function() {
  function TrendLine(pts) {
    this.pts = pts;
    this.getUniqueGroups = __bind(this.getUniqueGroups, this);
    this.getTrendLines = __bind(this.getTrendLines, this);
    this.getLineArray = __bind(this.getLineArray, this);
    this._createLineArrays = __bind(this._createLineArrays, this);
    this.linePts = {};
    _.map(this.pts, (function(_this) {
      return function(pt) {
        if (_this.linePts[pt.group] == null) {
          _this.linePts[pt.group] = [];
        }
        return _this.linePts[pt.group].push({
          x: pt.x,
          y: pt.y,
          z: pt.r
        });
      };
    })(this));
    this.groups = _.keys(this.linePts);
    this._createLineArrays();
  }

  TrendLine.prototype._createLineArrays = function() {
    this.linesMapped = {};
    this.lines = {};
    _.map(this.linePts, (function(_this) {
      return function(groupPts, groupName) {
        var i, pt, _i, _len, _results;
        _this.lines[groupName] = [];
        _this.linesMapped[groupName] = [];
        switch (groupPts.length) {
          case 0:
          case 1:
            break;
          case 2:
            return _this.lines[groupName] = [[groupPts[0].x, groupPts[0].y, groupPts[1].x, groupPts[1].y]];
          default:
            for (i = _i = 0, _len = groupPts.length; _i < _len; i = ++_i) {
              pt = groupPts[i];
              _this.linesMapped[groupName].push(pt);
              if (i !== 0 && i !== groupPts.length - 1) {
                _this.linesMapped[groupName].push(pt);
              }
            }
            i = 0;
            _results = [];
            while (i < _this.linesMapped[groupName].length) {
              _this.lines[groupName].push([_this.linesMapped[groupName][i].x, _this.linesMapped[groupName][i].y, _this.linesMapped[groupName][i + 1].x, _this.linesMapped[groupName][i + 1].y]);
              _results.push(i += 2);
            }
            return _results;
        }
      };
    })(this));
    return this.lines;
  };

  TrendLine.prototype.getLineArray = function(group) {
    if (this.lines == null) {
      this._createLineArrays();
    }
    return this.lines[group];
  };

  TrendLine.prototype.getTrendLines = function() {
    return this.lines;
  };

  TrendLine.prototype.getUniqueGroups = function() {
    return this.groups;
  };

  return TrendLine;

})();
