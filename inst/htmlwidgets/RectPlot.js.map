{"version":3,"file":"RectPlot.es6.js","names":[],"mappings":"","sources":["RectPlot.es6.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.RectPlot = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// KZ TODO replace global statements with imports once ES6 complete\n/* global PlotData */\n/* global AxisUtils */\n/* global d3 */\n/* global Utils */\n/* global SvgUtils */\n/* global DragUtils */\n/* global TrendLine */\n/* global Links */\n\nvar RectPlot = function () {\n  function RectPlot(state, width, height, X, Y, Z, group, label, labelAlt, svg, fixedRatio, xTitle, yTitle, zTitle, title, colors, transparency, grid, origin, originAlign, titleFontFamily, titleFontSize, titleFontColor, xTitleFontFamily, xTitleFontSize, xTitleFontColor, yTitleFontFamily, yTitleFontSize, yTitleFontColor, showLabels, labelsFontFamily, labelsFontSize, labelsFontColor, labelsLogoScale, xDecimals, yDecimals, zDecimals, xPrefix, yPrefix, zPrefix, xSuffix, ySuffix, zSuffix, legendShow, legendBubblesShow, legendFontFamily, legendFontSize, legendFontColor, axisFontFamily, axisFontColor, axisFontSize, pointRadius, xBoundsMinimum, xBoundsMaximum, yBoundsMinimum, yBoundsMaximum, xBoundsUnitsMajor, yBoundsUnitsMajor, trendLines, trendLinesLineThickness, trendLinesPointSize, plotBorderShow) {\n    _classCallCheck(this, RectPlot);\n\n    this.setDim = this.setDim.bind(this);\n    this.draw = this.draw.bind(this);\n    this.drawLabsAndPlot = this.drawLabsAndPlot.bind(this);\n    this.drawTitle = this.drawTitle.bind(this);\n    this.drawRect = this.drawRect.bind(this);\n    this.drawDimensionMarkers = this.drawDimensionMarkers.bind(this);\n    this.drawAxisLabels = this.drawAxisLabels.bind(this);\n    this.drawLegend = this.drawLegend.bind(this);\n    this.drawAnc = this.drawAnc.bind(this);\n    this.drawDraggedMarkers = this.drawDraggedMarkers.bind(this);\n    this.resetPlotAfterDragEvent = this.resetPlotAfterDragEvent.bind(this);\n    this.drawLabs = this.drawLabs.bind(this);\n    this.drawLinks = this.drawLinks.bind(this);\n    this.drawTrendLines = this.drawTrendLines.bind(this);\n    this.state = state;\n    this.width = width;\n    this.height = height;\n    this.X = X;\n    this.Y = Y;\n    this.Z = Z;\n    this.group = group;\n    this.label = label;\n    if (labelAlt == null) {\n      labelAlt = [];\n    }\n    this.labelAlt = labelAlt;\n    this.svg = svg;\n    if (zTitle == null) {\n      zTitle = '';\n    }\n    this.zTitle = zTitle;\n    this.colors = colors;\n    this.transparency = transparency;\n    this.originAlign = originAlign;\n    if (showLabels == null) {\n      showLabels = true;\n    }\n    this.showLabels = showLabels;\n    if (labelsLogoScale == null) {\n      labelsLogoScale = [];\n    }\n    if (xDecimals == null) {\n      xDecimals = null;\n    }\n    this.xDecimals = xDecimals;\n    if (yDecimals == null) {\n      yDecimals = null;\n    }\n    this.yDecimals = yDecimals;\n    if (zDecimals == null) {\n      zDecimals = null;\n    }\n    this.zDecimals = zDecimals;\n    if (xPrefix == null) {\n      xPrefix = '';\n    }\n    this.xPrefix = xPrefix;\n    if (yPrefix == null) {\n      yPrefix = '';\n    }\n    this.yPrefix = yPrefix;\n    if (zPrefix == null) {\n      zPrefix = '';\n    }\n    this.zPrefix = zPrefix;\n    if (xSuffix == null) {\n      xSuffix = '';\n    }\n    this.xSuffix = xSuffix;\n    if (ySuffix == null) {\n      ySuffix = '';\n    }\n    this.ySuffix = ySuffix;\n    if (zSuffix == null) {\n      zSuffix = '';\n    }\n    this.zSuffix = zSuffix;\n    this.legendShow = legendShow;\n    if (legendBubblesShow == null) {\n      legendBubblesShow = true;\n    }\n    this.legendBubblesShow = legendBubblesShow;\n    this.legendFontFamily = legendFontFamily;\n    this.legendFontSize = legendFontSize;\n    this.legendFontColor = legendFontColor;\n    this.axisFontFamily = axisFontFamily;\n    this.axisFontColor = axisFontColor;\n    this.axisFontSize = axisFontSize;\n    if (pointRadius == null) {\n      pointRadius = 2;\n    }\n    this.pointRadius = pointRadius;\n    if (xBoundsMinimum == null) {\n      xBoundsMinimum = null;\n    }\n    if (xBoundsMaximum == null) {\n      xBoundsMaximum = null;\n    }\n    if (yBoundsMinimum == null) {\n      yBoundsMinimum = null;\n    }\n    if (yBoundsMaximum == null) {\n      yBoundsMaximum = null;\n    }\n    if (xBoundsUnitsMajor == null) {\n      xBoundsUnitsMajor = null;\n    }\n    this.xBoundsUnitsMajor = xBoundsUnitsMajor;\n    if (yBoundsUnitsMajor == null) {\n      yBoundsUnitsMajor = null;\n    }\n    this.yBoundsUnitsMajor = yBoundsUnitsMajor;\n    if (trendLines == null) {\n      trendLines = false;\n    }\n    if (trendLinesLineThickness == null) {\n      trendLinesLineThickness = 1;\n    }\n    if (trendLinesPointSize == null) {\n      trendLinesPointSize = 2;\n    }\n    if (plotBorderShow == null) {\n      plotBorderShow = true;\n    }\n    this.plotBorderShow = plotBorderShow;\n    this.maxDrawFailureCount = 200;\n\n    this.labelsFont = {\n      size: labelsFontSize,\n      color: labelsFontColor,\n      family: labelsFontFamily,\n      logoScale: labelsLogoScale\n    };\n\n    this.xTitle = {\n      text: xTitle,\n      textHeight: xTitleFontSize,\n      fontFamily: xTitleFontFamily,\n      fontSize: xTitleFontSize,\n      fontColor: xTitleFontColor,\n      topPadding: 5\n    };\n    if (this.xTitle.text === '') {\n      this.xTitle.textHeight = 0;\n    }\n\n    this.yTitle = {\n      text: yTitle,\n      textHeight: yTitleFontSize,\n      fontFamily: yTitleFontFamily,\n      fontSize: yTitleFontSize,\n      fontColor: yTitleFontColor\n    };\n    if (this.yTitle.text === '') {\n      this.yTitle.textHeight = 0;\n    }\n\n    this.trendLines = {\n      show: trendLines,\n      lineThickness: trendLinesLineThickness,\n      pointSize: trendLinesPointSize\n    };\n\n    this.axisLeaderLineLength = 5;\n    this.axisDimensionText = {\n      rowMaxWidth: 0,\n      rowMaxHeight: 0,\n      colMaxWidth: 0,\n      colMaxHeight: 0,\n      rightPadding: 0 };\n    this.verticalPadding = 5;\n    this.horizontalPadding = 10;\n\n    this.bounds = {\n      xmin: xBoundsMinimum,\n      xmax: xBoundsMaximum,\n      ymin: yBoundsMinimum,\n      ymax: yBoundsMaximum\n    };\n\n    this.title = {\n      text: title,\n      color: titleFontColor,\n      anchor: 'middle',\n      fontSize: titleFontSize,\n      fontWeight: 'normal',\n      fontFamily: titleFontFamily\n    };\n\n    if (this.title.text === '') {\n      this.title.textHeight = 0;\n      this.title.paddingBot = 0;\n    } else {\n      this.title.textHeight = titleFontSize;\n      this.title.paddingBot = 20;\n    }\n\n    this.title.y = this.verticalPadding + this.title.textHeight;\n\n    this.grid = grid != null ? grid : true;\n    this.origin = origin != null ? origin : true;\n    this.fixedRatio = fixedRatio != null ? fixedRatio : true;\n\n    if (this.label == null) {\n      this.label = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = Array.from(this.X)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var x = _step.value;\n\n          this.label.push('');\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      this.showLabels = false;\n    }\n\n    this.setDim(this.svg, this.width, this.height);\n  }\n\n  RectPlot.prototype.setDim = function setDim(svg, width, height) {\n    this.svg = svg;\n    this.title.x = width / 2;\n    this.legendDim = {\n      width: 0, // init value\n      heightOfRow: this.legendFontSize + 9, // init val\n      rightPadding: this.legendFontSize / 1.6,\n      leftPadding: this.legendFontSize / 0.8,\n      centerPadding: this.legendFontSize / 0.53,\n      ptRadius: this.legendFontSize / 2.67,\n      ptToTextSpace: this.legendFontSize,\n      vertPtPadding: 5,\n      cols: 1,\n      markerLen: 5,\n      markerWidth: 1,\n      markerTextSize: 10,\n      markerCharWidth: 4\n    };\n\n    this.viewBoxDim = {\n      svgWidth: width,\n      svgHeight: height,\n      width: width - this.legendDim.width - this.horizontalPadding * 3 - this.axisLeaderLineLength - this.axisDimensionText.rowMaxWidth - this.yTitle.textHeight - this.axisDimensionText.rightPadding,\n      height: height - this.verticalPadding * 2 - this.title.textHeight - this.title.paddingBot - this.axisDimensionText.colMaxHeight - this.xTitle.textHeight - this.axisLeaderLineLength - this.xTitle.topPadding,\n      x: this.horizontalPadding * 2 + this.axisDimensionText.rowMaxWidth + this.axisLeaderLineLength + this.yTitle.textHeight,\n      y: this.verticalPadding + this.title.textHeight + this.title.paddingBot,\n      labelFontSize: this.labelsFont.size,\n      labelSmallFontSize: this.labelsFont.size * 0.75,\n      labelFontColor: this.labelsFont.color,\n      labelFontFamily: this.labelsFont.family,\n      labelLogoScale: this.labelsFont.logoScale\n    };\n\n    this.legendDim.x = this.viewBoxDim.x + this.viewBoxDim.width;\n    this.title.x = this.viewBoxDim.x + this.viewBoxDim.width / 2;\n\n    this.data = new PlotData(this.X, this.Y, this.Z, this.group, this.label, this.labelAlt, this.viewBoxDim, this.legendDim, this.colors, this.fixedRatio, this.originAlign, this.pointRadius, this.bounds, this.transparency, this.legendShow, this.legendBubblesShow, this.axisDimensionText);\n\n    return this.drawFailureCount = 0;\n  };\n\n  RectPlot.prototype.draw = function draw() {\n    var _this = this;\n\n    return this.drawDimensionMarkers().then(this.drawLegend.bind(this)).then(this.drawLabsAndPlot.bind(this)).then(function () {\n      // TODO Po if you remove this then the life expectancy bubble plot will not have the legendLabels in the legend. It will only have the groups\n      if (_this.data.legendRequiresRedraw) {\n        return _this.drawLegend();\n      }\n    }).then(function () {\n      console.log('draw succeeded after ' + _this.drawFailureCount + ' failures');\n      return _this.drawFailureCount = 0;\n    }).catch(function (err) {\n      _this.drawFailureCount++;\n      if (_this.drawFailureCount >= _this.maxDrawFailureCount) {\n        console.log('draw failure ' + err.message + ' (fail count: ' + _this.drawFailureCount + '). Exceeded max draw failures of ' + _this.maxDrawFailureCount + '. Terminating');\n        throw err;\n      }\n\n      if (err && err.retry) {\n        console.log('draw failure ' + err.message + ' (fail count: ' + _this.drawFailureCount + '). Redrawing');\n        return _this.draw();\n      }\n\n      throw err;\n    });\n  };\n\n  RectPlot.prototype.drawLabsAndPlot = function drawLabsAndPlot() {\n    var _this2 = this;\n\n    this.data.normalizeData();\n\n    return this.data.getPtsAndLabs('RectPlot.drawLabsAndPlot').then(function () {\n      _this2.title.x = _this2.viewBoxDim.x + _this2.viewBoxDim.width / 2;\n\n      if (!_this2.state.isLegendPtsSynced(_this2.data.outsidePlotPtsId)) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = Array.from(_this2.state.getLegendPts())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var pt = _step2.value;\n\n            if (!(_.indexOf(_this2.data.outsidePlotPtsId, pt) !== -1)) {\n              _this2.data.addElemToLegend(pt);\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = Array.from(_this2.data.outsidePlotPtsId)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            pt = _step3.value;\n\n            if (!(_.indexOf(_this2.state.getLegendPts(), pt) !== -1)) {\n              _this2.state.pushLegendPt(pt);\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        var error = new Error('drawLabsAndPlot failed : state.isLegendPtsSynced = false');\n        error.retry = true;\n        throw error;\n      }\n    }).then(function () {\n      try {\n        _this2.drawTitle();\n        _this2.drawAnc();\n        _this2.drawLabs();\n        if (_this2.trendLines.show) {\n          _this2.drawTrendLines();\n        }\n        _this2.drawDraggedMarkers();\n        if (_this2.plotBorderShow) {\n          _this2.drawRect();\n        }\n        return _this2.drawAxisLabels();\n      } catch (error) {\n        return console.log(error);\n      }\n    });\n  };\n\n  RectPlot.prototype.drawTitle = function drawTitle() {\n    if (this.title.text !== '') {\n      this.svg.selectAll('.plot-title').remove();\n      return this.svg.append('text').attr('class', 'plot-title').attr('font-family', this.title.fontFamily).attr('x', this.title.x).attr('y', this.title.y).attr('text-anchor', this.title.anchor).attr('fill', this.title.color).attr('font-size', this.title.fontSize).attr('font-weight', this.title.fontWeight).text(this.title.text);\n    }\n  };\n\n  RectPlot.prototype.drawRect = function drawRect() {\n    this.svg.selectAll('.plot-viewbox').remove();\n    return this.svg.append('rect').attr('class', 'plot-viewbox').attr('x', this.viewBoxDim.x).attr('y', this.viewBoxDim.y).attr('width', this.viewBoxDim.width).attr('height', this.viewBoxDim.height).attr('fill', 'none').attr('stroke', 'black').attr('stroke-width', '1px');\n  };\n\n  RectPlot.prototype.drawDimensionMarkers = function drawDimensionMarkers() {\n    return new Promise(function (resolve, reject) {\n      // TODO: unnecessary double call ? PlotData.constructor calls PlotData.calculateMinMax ?\n      this.data.calculateMinMax();\n      var axisArrays = AxisUtils.getAxisDataArrays(this, this.data, this.viewBoxDim);\n\n      // TODO KZ this sequence can be easily consolidated\n      if (this.grid) {\n        this.svg.selectAll('.origin').remove();\n        this.svg.selectAll('.origin').data(axisArrays.gridOrigin).enter().append('line').attr('class', 'origin').attr('x1', function (d) {\n          return d.x1;\n        }).attr('y1', function (d) {\n          return d.y1;\n        }).attr('x2', function (d) {\n          return d.x2;\n        }).attr('y2', function (d) {\n          return d.y2;\n        }).attr('stroke-width', 0.2).attr('stroke', 'grey');\n        if (this.origin) {\n          this.svg.selectAll('.origin').style('stroke-dasharray', '4, 6').attr('stroke-width', 1).attr('stroke', 'black');\n        }\n\n        this.svg.selectAll('.dim-marker').remove();\n        this.svg.selectAll('.dim-marker').data(axisArrays.gridLines).enter().append('line').attr('class', 'dim-marker').attr('x1', function (d) {\n          return d.x1;\n        }).attr('y1', function (d) {\n          return d.y1;\n        }).attr('x2', function (d) {\n          return d.x2;\n        }).attr('y2', function (d) {\n          return d.y2;\n        }).attr('stroke-width', 0.2).attr('stroke', 'grey');\n      } else if (!this.grid && this.origin) {\n        this.svg.selectAll('.origin').remove();\n        this.svg.selectAll('.origin').data(axisArrays.gridOrigin).enter().append('line').attr('class', 'origin').attr('x1', function (d) {\n          return d.x1;\n        }).attr('y1', function (d) {\n          return d.y1;\n        }).attr('x2', function (d) {\n          return d.x2;\n        }).attr('y2', function (d) {\n          return d.y2;\n        }).style('stroke-dasharray', '4, 6').attr('stroke-width', 1).attr('stroke', 'black');\n      }\n\n      this.svg.selectAll('.dim-marker-leader').remove();\n      this.svg.selectAll('.dim-marker-leader').data(axisArrays.axisLeader).enter().append('line').attr('class', 'dim-marker-leader').attr('x1', function (d) {\n        return d.x1;\n      }).attr('y1', function (d) {\n        return d.y1;\n      }).attr('x2', function (d) {\n        return d.x2;\n      }).attr('y2', function (d) {\n        return d.y2;\n      }).attr('stroke-width', 1).attr('stroke', 'black');\n\n      this.svg.selectAll('.dim-marker-label').remove();\n      var markerLabels = this.svg.selectAll('.dim-marker-label').data(axisArrays.axisLeaderLabel).enter().append('text').attr('class', 'dim-marker-label').attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      }).attr('font-family', this.axisFontFamily).attr('fill', this.axisFontColor).attr('font-size', this.axisFontSize).text(function (d) {\n        return d.label;\n      }).attr('text-anchor', function (d) {\n        return d.anchor;\n      }).attr('type', function (d) {\n        return d.type;\n      });\n\n      // Figure out the max width of the yaxis dimensional labels\n      var initAxisTextRowWidth = this.axisDimensionText.rowMaxWidth;\n      var initAxisTextColWidth = this.axisDimensionText.colMaxWidth;\n      var initAxisTextRowHeight = this.axisDimensionText.rowMaxHeight;\n      var initAxisTextColHeight = this.axisDimensionText.colMaxHeight;\n      for (var i = 0; i < markerLabels[0].length; i++) {\n        var markerLabel = markerLabels[0][i];\n        var labelType = d3.select(markerLabel).attr('type');\n        var bb = markerLabel.getBBox();\n        if (this.axisDimensionText.rowMaxWidth < bb.width && labelType === 'row') {\n          this.axisDimensionText.rowMaxWidth = bb.width;\n        }\n        if (this.axisDimensionText.colMaxWidth < bb.width && labelType === 'col') {\n          this.axisDimensionText.colMaxWidth = bb.width;\n        }\n        if (this.axisDimensionText.rowMaxHeight < bb.height && labelType === 'row') {\n          this.axisDimensionText.rowMaxHeight = bb.height;\n        }\n        if (this.axisDimensionText.colMaxHeight < bb.height && labelType === 'col') {\n          this.axisDimensionText.colMaxHeight = bb.height;\n        }\n\n        if (this.width < bb.x + bb.width) {\n          this.axisDimensionText.rightPadding = bb.width / 2;\n        }\n      }\n\n      if (initAxisTextRowWidth !== this.axisDimensionText.rowMaxWidth || initAxisTextColWidth !== this.axisDimensionText.colMaxWidth || initAxisTextRowHeight !== this.axisDimensionText.rowMaxHeight || initAxisTextColHeight !== this.axisDimensionText.colMaxHeight) {\n        this.setDim(this.svg, this.width, this.height);\n        this.data.revertMinMax();\n        var error = new Error('axis marker out of bound');\n        error.retry = true;\n        return reject(error);\n      }\n      return resolve();\n    }.bind(this));\n  };\n\n  RectPlot.prototype.drawAxisLabels = function drawAxisLabels() {\n    var axisLabels = [{ // x axis label\n      x: this.viewBoxDim.x + this.viewBoxDim.width / 2,\n      y: this.viewBoxDim.y + this.viewBoxDim.height + this.axisLeaderLineLength + this.axisDimensionText.colMaxHeight + this.xTitle.topPadding + this.xTitle.textHeight,\n      text: this.xTitle.text,\n      anchor: 'middle',\n      transform: 'rotate(0)',\n      display: this.xTitle === '' ? 'none' : '',\n      fontFamily: this.xTitle.fontFamily,\n      fontSize: this.xTitle.fontSize,\n      fontColor: this.xTitle.fontColor\n    }, { // y axis label\n      x: this.horizontalPadding + this.yTitle.textHeight,\n      y: this.viewBoxDim.y + this.viewBoxDim.height / 2,\n      text: this.yTitle.text,\n      anchor: 'middle',\n      transform: 'rotate(270,' + (this.horizontalPadding + this.yTitle.textHeight) + ', ' + (this.viewBoxDim.y + this.viewBoxDim.height / 2) + ')',\n      display: this.yTitle === '' ? 'none' : '',\n      fontFamily: this.yTitle.fontFamily,\n      fontSize: this.yTitle.fontSize,\n      fontColor: this.yTitle.fontColor\n    }];\n\n    this.svg.selectAll('.axis-label').remove();\n    return this.svg.selectAll('.axis-label').data(axisLabels).enter().append('text').attr('class', 'axis-label').attr('x', function (d) {\n      return d.x;\n    }).attr('y', function (d) {\n      return d.y;\n    }).attr('font-family', function (d) {\n      return d.fontFamily;\n    }).attr('font-size', function (d) {\n      return d.fontSize;\n    }).attr('fill', function (d) {\n      return d.fontColor;\n    }).attr('text-anchor', function (d) {\n      return d.anchor;\n    }).attr('transform', function (d) {\n      return d.transform;\n    }).text(function (d) {\n      return d.text;\n    }).style('font-weight', 'normal').style('display', function (d) {\n      return d.display;\n    });\n  };\n\n  RectPlot.prototype.drawLegend = function drawLegend() {\n    return new Promise(function (resolve, reject) {\n      var legendFontSize = void 0;\n      this.data.setupLegendGroupsAndPts();\n\n      if (this.legendBubblesShow && Utils.isArrOfNums(this.Z)) {\n        this.svg.selectAll('.legend-bubbles').remove();\n        this.svg.selectAll('.legend-bubbles').data(this.data.legendBubbles).enter().append('circle').attr('class', 'legend-bubbles').attr('cx', function (d) {\n          return d.cx;\n        }).attr('cy', function (d) {\n          return d.cy;\n        }).attr('r', function (d) {\n          return d.r;\n        }).attr('fill', 'none').attr('stroke', 'black').attr('stroke-opacity', 0.5);\n\n        this.svg.selectAll('.legend-bubbles-labels').remove();\n        this.svg.selectAll('.legend-bubbles-labels').data(this.data.legendBubbles).enter().append('text').attr('class', 'legend-bubbles-labels').attr('x', function (d) {\n          return d.x;\n        }).attr('y', function (d) {\n          return d.y;\n        }).attr('text-anchor', 'middle').attr('font-size', this.legendFontSize).attr('font-family', this.legendFontFamily).attr('fill', this.legendFontColor).text(function (d) {\n          return d.text;\n        });\n\n        if (this.zTitle !== '') {\n          legendFontSize = this.legendFontSize;\n\n          this.svg.selectAll('.legend-bubbles-title').remove();\n          var legendBubbleTitleSvg = this.svg.selectAll('.legend-bubbles-title').data(this.data.legendBubblesTitle).enter().append('text').attr('class', 'legend-bubbles-title').attr('x', function (d) {\n            return d.x;\n          }).attr('y', function (d) {\n            return d.y - legendFontSize * 1.5;\n          }).attr('text-anchor', 'middle').attr('font-family', this.legendFontFamily).attr('font-weight', 'normal').attr('fill', this.legendFontColor).text(this.zTitle);\n\n          SvgUtils.setSvgBBoxWidthAndHeight(this.data.legendBubblesTitle, legendBubbleTitleSvg);\n        }\n      }\n\n      var drag = DragUtils.getLegendLabelDragAndDrop(this, this.data);\n      this.svg.selectAll('.legend-dragged-pts-text').remove();\n      this.svg.selectAll('.legend-dragged-pts-text').data(this.data.legendPts).enter().append('text').attr('class', 'legend-dragged-pts-text').attr('id', function (d) {\n        return 'legend-' + d.id;\n      }).attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      }).attr('font-family', this.legendFontFamily).attr('font-size', this.legendFontSize).attr('text-anchor', function (d) {\n        return d.anchor;\n      }).attr('fill', function (d) {\n        return d.color;\n      }).text(function (d) {\n        if (d.markerId != null) {\n          return Utils.getSuperscript(d.markerId + 1) + d.text;\n        } else {\n          return d.text;\n        }\n      }).call(drag);\n\n      SvgUtils.setSvgBBoxWidthAndHeight(this.data.legendPts, this.svg.selectAll('.legend-dragged-pts-text'));\n\n      if (this.legendShow) {\n        this.svg.selectAll('.legend-groups-text').remove();\n        this.svg.selectAll('.legend-groups-text').data(this.data.legendGroups).enter().append('text').attr('class', 'legend-groups-text').attr('x', function (d) {\n          return d.x;\n        }).attr('y', function (d) {\n          return d.y;\n        }).attr('font-family', this.legendFontFamily).attr('fill', this.legendFontColor).attr('font-size', this.legendFontSize).text(function (d) {\n          return d.text;\n        }).attr('text-anchor', function (d) {\n          return d.anchor;\n        });\n\n        this.svg.selectAll('.legend-groups-pts').remove();\n        this.svg.selectAll('.legend-groups-pts').data(this.data.legendGroups).enter().append('circle').attr('class', 'legend-groups-pts').attr('cx', function (d) {\n          return d.cx;\n        }).attr('cy', function (d) {\n          return d.cy;\n        }).attr('r', function (d) {\n          return d.r;\n        }).attr('fill', function (d) {\n          return d.color;\n        }).attr('stroke', function (d) {\n          return d.stroke;\n        }).attr('stroke-opacity', function (d) {\n          return d['stroke-opacity'];\n        }).attr('fill-opacity', function (d) {\n          return d.fillOpacity;\n        });\n\n        // Height and width are not provided\n        SvgUtils.setSvgBBoxWidthAndHeight(this.data.legendGroups, this.svg.selectAll('.legend-groups-text'));\n      }\n\n      if (this.legendShow || this.legendBubblesShow && Utils.isArrOfNums(this.Z) || this.data.legendPts != null) {\n        if (this.data.resizedAfterLegendGroupsDrawn(this.legendShow)) {\n          this.data.revertMinMax();\n          var error = new Error('drawLegend Failed');\n          error.retry = true;\n          return reject(error);\n        }\n      }\n      return resolve();\n    }.bind(this));\n  };\n\n  RectPlot.prototype.drawAnc = function drawAnc() {\n    var _this3 = this;\n\n    var labelTxt = void 0,\n        xlabel = void 0,\n        ylabel = void 0;\n    this.svg.selectAll('.anc').remove();\n    var anc = this.svg.selectAll('.anc').data(this.data.pts).enter().append('circle').attr('class', 'anc').attr('id', function (d) {\n      return 'anc-' + d.id;\n    }).attr('cx', function (d) {\n      return d.x;\n    }).attr('cy', function (d) {\n      return d.y;\n    }).attr('fill', function (d) {\n      return d.color;\n    }).attr('fill-opacity', function (d) {\n      return d.fillOpacity;\n    }).attr('r', function (d) {\n      if (_this3.trendLines.show) {\n        return _this3.trendLines.pointSize;\n      } else {\n        return d.r;\n      }\n    });\n    if (Utils.isArrOfNums(this.Z)) {\n      return anc.append('title').text(function (d) {\n        xlabel = Utils.getFormattedNum(d.labelX, _this3.xDecimals, _this3.xPrefix, _this3.xSuffix);\n        ylabel = Utils.getFormattedNum(d.labelY, _this3.yDecimals, _this3.yPrefix, _this3.ySuffix);\n        var zlabel = Utils.getFormattedNum(d.labelZ, _this3.zDecimals, _this3.zPrefix, _this3.zSuffix);\n        labelTxt = d.label === '' ? d.labelAlt : d.label;\n        return labelTxt + ', ' + d.group + '\\n' + zlabel + '\\n(' + xlabel + ', ' + ylabel + ')';\n      });\n    } else {\n      return anc.append('title').text(function (d) {\n        xlabel = Utils.getFormattedNum(d.labelX, _this3.xDecimals, _this3.xPrefix, _this3.xSuffix);\n        ylabel = Utils.getFormattedNum(d.labelY, _this3.yDecimals, _this3.yPrefix, _this3.ySuffix);\n        labelTxt = d.label === '' ? d.labelAlt : d.label;\n        return labelTxt + ', ' + d.group + '\\n(' + xlabel + ', ' + ylabel + ')';\n      });\n    }\n  };\n\n  RectPlot.prototype.drawDraggedMarkers = function drawDraggedMarkers() {\n    this.svg.selectAll('.marker').remove();\n    this.svg.selectAll('.marker').data(this.data.outsidePlotMarkers).enter().append('line').attr('class', 'marker').attr('x1', function (d) {\n      return d.x1;\n    }).attr('y1', function (d) {\n      return d.y1;\n    }).attr('x2', function (d) {\n      return d.x2;\n    }).attr('y2', function (d) {\n      return d.y2;\n    }).attr('stroke-width', function (d) {\n      return d.width;\n    }).attr('stroke', function (d) {\n      return d.color;\n    });\n\n    this.svg.selectAll('.marker-label').remove();\n    return this.svg.selectAll('.marker-label').data(this.data.outsidePlotMarkers).enter().append('text').attr('class', 'marker-label').attr('x', function (d) {\n      return d.markerTextX;\n    }).attr('y', function (d) {\n      return d.markerTextY;\n    }).attr('font-family', 'Arial').attr('text-anchor', 'start').attr('font-size', this.data.legendDim.markerTextSize).attr('fill', function (d) {\n      return d.color;\n    }).text(function (d) {\n      return d.markerLabel;\n    });\n  };\n\n  RectPlot.prototype.resetPlotAfterDragEvent = function resetPlotAfterDragEvent() {\n    var plotElems = ['.plot-viewbox', '.origin', '.dim-marker', '.dim-marker-leader', '.dim-marker-label', '.axis-label', '.legend-pts', '.legend-text', '.anc', '.lab', '.link'];\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = Array.from(plotElems)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var elem = _step4.value;\n\n        this.svg.selectAll(elem).remove();\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n\n    return this.draw();\n  };\n\n  RectPlot.prototype.drawLabs = function drawLabs() {\n    var drag = void 0,\n        labeler = void 0,\n        labels_img_svg = void 0,\n        labels_svg = void 0;\n    if (this.showLabels && !this.trendLines.show) {\n      drag = DragUtils.getLabelDragAndDrop(this);\n      this.state.updateLabelsWithUserPositionedData(this.data.lab, this.data.viewBoxDim);\n\n      this.svg.selectAll('.lab-img').remove();\n      this.svg.selectAll('.lab-img').data(this.data.lab).enter().append('svg:image').attr('class', 'lab-img').attr('xlink:href', function (d) {\n        return d.url;\n      }).attr('id', function (d) {\n        if (d.url !== '') {\n          return d.id;\n        }\n      }).attr('x', function (d) {\n        return d.x - d.width / 2;\n      }).attr('y', function (d) {\n        return d.y - d.height;\n      }).attr('width', function (d) {\n        return d.width;\n      }).attr('height', function (d) {\n        return d.height;\n      }).call(drag);\n\n      this.svg.selectAll('.lab').remove();\n      this.svg.selectAll('.lab').data(this.data.lab).enter().append('text').attr('class', 'lab').attr('id', function (d) {\n        if (d.url === '') {\n          return d.id;\n        }\n      }).attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      }).attr('font-family', function (d) {\n        return d.fontFamily;\n      }).text(function (d) {\n        if (d.url === '') {\n          return d.text;\n        }\n      }).attr('text-anchor', 'middle').attr('fill', function (d) {\n        return d.color;\n      }).attr('font-size', function (d) {\n        return d.fontSize;\n      }).call(drag);\n\n      labels_svg = this.svg.selectAll('.lab');\n      labels_img_svg = this.svg.selectAll('.lab-img');\n\n      SvgUtils.setSvgBBoxWidthAndHeight(this.data.lab, labels_svg);\n      console.log('rhtmlLabeledScatter: Running label placement algorithm...');\n      labeler = d3.labeler().svg(this.svg).w1(this.viewBoxDim.x).w2(this.viewBoxDim.x + this.viewBoxDim.width).h1(this.viewBoxDim.y).h2(this.viewBoxDim.y + this.viewBoxDim.height).anchor(this.data.pts).label(this.data.lab).pinned(this.state.getUserPositionedLabIds()).start(500);\n\n      labels_svg.transition().duration(800).attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      });\n\n      labels_img_svg.transition().duration(800).attr('x', function (d) {\n        return d.x - d.width / 2;\n      }).attr('y', function (d) {\n        return d.y - d.height;\n      });\n\n      return this.drawLinks();\n    } else if (this.showLabels && this.trendLines.show) {\n      this.tl = new TrendLine(this.data.pts, this.data.lab);\n      this.state.updateLabelsWithUserPositionedData(this.data.lab, this.data.viewBoxDim);\n\n      drag = DragUtils.getLabelDragAndDrop(this, this.trendLines.show);\n\n      this.svg.selectAll('.lab-img').remove();\n      this.svg.selectAll('.lab-img').data(this.tl.arrowheadLabels).enter().append('svg:image').attr('class', 'lab-img').attr('xlink:href', function (d) {\n        return d.url;\n      }).attr('id', function (d) {\n        if (d.url !== '') {\n          return d.id;\n        }\n      }).attr('x', function (d) {\n        return d.x - d.width / 2;\n      }).attr('y', function (d) {\n        return d.y - d.height;\n      }).attr('width', function (d) {\n        return d.width;\n      }).attr('height', function (d) {\n        return d.height;\n      }).call(drag);\n\n      this.svg.selectAll('.lab').remove();\n      this.svg.selectAll('.lab').data(this.tl.arrowheadLabels).enter().append('text').attr('class', 'lab').attr('id', function (d) {\n        if (d.url === '') {\n          return d.id;\n        }\n      }).attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      }).attr('font-family', function (d) {\n        return d.fontFamily;\n      }).text(function (d) {\n        if (d.url === '') {\n          return d.text;\n        }\n      }).attr('text-anchor', 'middle').attr('fill', function (d) {\n        return d.color;\n      }).attr('font-size', function (d) {\n        return d.fontSize;\n      }).call(drag);\n\n      labels_svg = this.svg.selectAll('.lab');\n      labels_img_svg = this.svg.selectAll('.lab-img');\n      SvgUtils.setSvgBBoxWidthAndHeight(this.tl.arrowheadLabels, labels_svg);\n\n      labeler = d3.labeler().svg(this.svg).w1(this.viewBoxDim.x).w2(this.viewBoxDim.x + this.viewBoxDim.width).h1(this.viewBoxDim.y).h2(this.viewBoxDim.y + this.viewBoxDim.height).anchor(this.tl.arrowheadPts).label(this.tl.arrowheadLabels).pinned(this.state.getUserPositionedLabIds()).start(500);\n\n      labels_svg.transition().duration(800).attr('x', function (d) {\n        return d.x;\n      }).attr('y', function (d) {\n        return d.y;\n      });\n\n      return labels_img_svg.transition().duration(800).attr('x', function (d) {\n        return d.x - d.width / 2;\n      }).attr('y', function (d) {\n        return d.y - d.height;\n      });\n    }\n  };\n\n  RectPlot.prototype.drawLinks = function drawLinks() {\n    var links = new Links(this.data.pts, this.data.lab);\n    this.svg.selectAll('.link').remove();\n    return this.svg.selectAll('.link').data(links.getLinkData()).enter().append('line').attr('class', 'link').attr('x1', function (d) {\n      return d.x1;\n    }).attr('y1', function (d) {\n      return d.y1;\n    }).attr('x2', function (d) {\n      return d.x2;\n    }).attr('y2', function (d) {\n      return d.y2;\n    }).attr('stroke-width', function (d) {\n      return d.width;\n    }).attr('stroke', function (d) {\n      return d.color;\n    }).style('stroke-opacity', this.data.plotColors.getFillOpacity(this.transparency));\n  };\n\n  RectPlot.prototype.drawTrendLines = function drawTrendLines() {\n    var _this4 = this;\n\n    this.state.updateLabelsWithUserPositionedData(this.data.lab, this.data.viewBoxDim);\n    if (this.tl === undefined || this.tl === null) {\n      this.tl = new TrendLine(this.data.pts, this.data.lab);\n    }\n\n    return _.map(this.tl.getUniqueGroups(), function (group) {\n      // Arrowhead marker\n      _this4.svg.selectAll('#triangle-' + group).remove();\n      _this4.svg.append('svg:defs').append('svg:marker').attr('id', 'triangle-' + group).attr('refX', 6).attr('refY', 6).attr('markerWidth', 30).attr('markerHeight', 30).attr('orient', 'auto').append('path').attr('d', 'M 0 0 12 6 0 12 3 6').style('fill', _this4.data.plotColors.getColorFromGroup(group));\n\n      _this4.svg.selectAll('.trendline-' + group).remove();\n      return _this4.svg.selectAll('.trendline-' + group).data(_this4.tl.getLineArray(group)).enter().append('line').attr('class', 'trendline-' + group).attr('x1', function (d) {\n        return d[0];\n      }).attr('y1', function (d) {\n        return d[1];\n      }).attr('x2', function (d) {\n        return d[2];\n      }).attr('y2', function (d) {\n        return d[3];\n      }).attr('stroke', _this4.data.plotColors.getColorFromGroup(group)).attr('stroke-width', _this4.trendLines.lineThickness).attr('marker-end', function (d, i) {\n        // Draw arrowhead on last element in trendline\n        if (i === _this4.tl.getLineArray(group).length - 1) {\n          return 'url(#triangle-' + group + ')';\n        }\n      });\n    });\n  };\n\n  return RectPlot;\n}();\n\nmodule.exports = RectPlot;\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}