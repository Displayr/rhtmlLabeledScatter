// Generated by CoffeeScript 1.8.0
var LabeledScatter,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LabeledScatter = (function(_super) {
  __extends(LabeledScatter, _super);

  function LabeledScatter(el, width, height) {
    LabeledScatter.__super__.constructor.call(this, el, width, height);
    this.width = width;
    this.height = height;
    this._initializeState({
      selected: null
    });
  }

  LabeledScatter.prototype.resize = function(width, height) {
    this.width = width;
    this.height = height;
    return _redraw();
  };

  LabeledScatter.prototype._processConfig = function() {
    console.log('_processConfig. Change this function in your rhtmlWidget');
    console.log('the config has already been added to the context at @config, you must now "process" it');
    return console.log(this.config);
  };

  LabeledScatter.prototype._redraw = function() {
    var data, plot, plotData;
    console.log('_redraw. Change this function in your rhtmlWidget');
    console.log('the outer SVG has already been created and added to the DOM. You should do things with it');
    data = testData;
    plot = new RectPlot(this.width, this.height, data.X, data.Y, this.outerSvg);
    plotData = new PlotData(data.X, data.Y, data.group, data.label, plot.viewBoxDim);
    plot.draw(plotData.minX, plotData.maxX, plotData.minY, plotData.maxY);
    plot.drawAnc(plotData.pts);
    plot.drawLabs(plotData.lab, plotData.anc, plotData.len);
    return plot.drawLegend(plotData.legend);
  };

  return LabeledScatter;

})(RhtmlSvgWidget);
