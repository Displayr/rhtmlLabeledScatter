// Generated by CoffeeScript 1.8.0
var LabeledScatter,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LabeledScatter = (function(_super) {
  __extends(LabeledScatter, _super);

  function LabeledScatter(el, width, height) {
    LabeledScatter.__super__.constructor.call(this, el, width, height);
    this.width = width;
    this.height = height;
    this._initializeState({
      selected: null
    });
  }

  LabeledScatter.prototype.resize = function(width, height) {
    this.width = width;
    this.height = height;
    return _redraw();
  };

  LabeledScatter.prototype._processConfig = function() {
    console.log('_processConfig. Change this function in your rhtmlWidget');
    console.log('the config has already been added to the context at @config, you must now "process" it');
    return console.log(this.config);
  };

  LabeledScatter.prototype._redraw = function() {
    var anc, axisLabels, color, data, heightOfRow, i, lab, labeler, labels_svg, legend, legendLeftPadding, legendPtRad, legendStartY, li, links, maxX, maxY, minX, minY, newColor, newLinkPt, newPtOnLabelBorder, plot, plotData, pts, viewBoxDim, xAxisPadding, yAxisPadding;
    console.log('_redraw. Change this function in your rhtmlWidget');
    console.log('the outer SVG has already been created and added to the DOM. You should do things with it');
    data = testData;
    plot = new RectPlot(this.width, this.height, data.X, data.Y, this.outerSvg);
    viewBoxDim = plot.getViewBoxDim();
    plotData = new PlotData(data.X, data.Y);
    plotData.normalizeData();
    minX = plotData.getMinX();
    maxX = plotData.getMaxX();
    minY = plotData.getMinY();
    maxY = plotData.getMaxY();
    plot.draw(plotData.getMinX(), plotData.getMaxX(), plotData.getMinY(), plotData.getMaxY());
    pts = [];
    lab = [];
    anc = [];
    legend = [];
    color = new RColor;
    i = 0;
    while (i < plotData.getLen()) {
      if (!(_.some(legend, function(e) {
        return e.text === data.group[i];
      }))) {
        newColor = color.get(true, 0.9, 0.9);
        legend.push({
          text: data.group[i],
          color: newColor
        });
      }
      pts.push({
        x: data.X[i] * viewBoxDim.width + viewBoxDim.x,
        y: data.Y[i] * viewBoxDim.height + viewBoxDim.y,
        r: 2,
        label: data.label[i],
        labelX: data.X[i] * viewBoxDim.width + viewBoxDim.x,
        labelY: data.Y[i] * viewBoxDim.height + viewBoxDim.y,
        group: data.group[i],
        color: newColor
      });
      lab.push({
        x: data.X[i] * viewBoxDim.width + viewBoxDim.x,
        y: data.Y[i] * viewBoxDim.height + viewBoxDim.y,
        text: data.label[i]
      });
      anc.push({
        x: data.X[i] * viewBoxDim.width + viewBoxDim.x,
        y: data.Y[i] * viewBoxDim.height + viewBoxDim.y,
        r: 2
      });
      i++;
    }
    this.outerSvg.selectAll('.anc').data(pts).enter().append('circle').attr('class', 'anc').attr('cx', function(d) {
      return d.x;
    }).attr('cy', function(d) {
      return d.y;
    }).attr('r', function(d) {
      return d.r;
    }).attr('fill', function(d) {
      return d.color;
    });
    labels_svg = this.outerSvg.selectAll('.label').data(lab).enter().append('text').attr('class', 'init-labs').attr('x', function(d) {
      return d.x;
    }).attr('y', function(d) {
      return d.y;
    }).attr('font-family', 'Arial Narrow').text(function(d) {
      return d.text;
    }).attr('text-anchor', 'middle');
    i = 0;
    while (i < plotData.getLen()) {
      lab[i].width = labels_svg[0][i].getBBox().width;
      lab[i].height = labels_svg[0][i].getBBox().height;
      i++;
    }
    labeler = d3.labeler().svg(this.outerSvg).w1(viewBoxDim.x).w2(viewBoxDim.x + viewBoxDim.width).h1(viewBoxDim.y).h2(viewBoxDim.y + viewBoxDim.height).anchor(anc).label(lab).start(500);
    newPtOnLabelBorder = function(label, anchor) {
      var a, above, aboveMid, abovePadded, ambiguityFactor, ancNearby, below, belowMid, belowPadded, centered, labelBorder, left, leftPadded, padB, padL, padR, padT, paddedCenter, padding, right, rightPadded, _i, _len;
      labelBorder = {
        botL: [label.x - label.width / 2, label.y],
        botC: [label.x, label.y],
        botR: [label.x + label.width / 2, label.y],
        topL: [label.x - label.width / 2, label.y - label.height + 2],
        topC: [label.x, label.y - label.height + 2],
        topR: [label.x + label.width / 2, label.y - label.height + 2],
        midL: [label.x - label.width / 2, label.y - label.height / 2],
        midR: [label.x + label.width / 2, label.y - label.height / 2]
      };
      padding = 10;
      centered = (anchor.x > label.x - label.width / 2) && (anchor.x < label.x + label.width / 2);
      paddedCenter = (anchor.x > label.x - label.width / 2 - padding) && (anchor.x < label.x + label.width / 2 + padding);
      abovePadded = anchor.y < label.y - label.height - padding;
      above = anchor.y < label.y - label.height;
      aboveMid = anchor.y < label.y - label.height / 2;
      belowPadded = anchor.y > label.y + padding;
      below = anchor.y > label.y;
      belowMid = anchor.y >= label.y - label.height / 2;
      left = anchor.x < label.x - label.width / 2;
      right = anchor.x > label.x + label.width / 2;
      leftPadded = anchor.x < label.x - label.width / 2 - padding;
      rightPadded = anchor.x > label.x + label.width / 2 + padding;
      if (centered && abovePadded) {
        return labelBorder.topC;
      } else if (centered && belowPadded) {
        return labelBorder.botC;
      } else if (above && left) {
        return labelBorder.topL;
      } else if (above && right) {
        return labelBorder.topR;
      } else if (below && left) {
        return labelBorder.botL;
      } else if (below && right) {
        return labelBorder.botR;
      } else if (leftPadded) {
        return labelBorder.midL;
      } else if (rightPadded) {
        return labelBorder.midR;
      } else {
        ambiguityFactor = 10;
        padL = labelBorder.topL[0] - ambiguityFactor;
        padR = labelBorder.topR[0] + ambiguityFactor;
        padT = labelBorder.topL[1] - ambiguityFactor;
        padB = labelBorder.botR[1] + ambiguityFactor;
        ancNearby = 0;
        for (_i = 0, _len = pts.length; _i < _len; _i++) {
          a = pts[_i];
          if ((a.x > padL && a.x < padR) && (a.y > padT && a.y < padB)) {
            ancNearby++;
          }
        }
        if (ancNearby > 1) {
          if (!left && !right && !above && !below) {
            return labelBorder.botC;
          } else if (centered && above) {
            return labelBorder.topC;
          } else if (centered && below) {
            return labelBorder.botC;
          } else if (left && above) {
            return labelBorder.topL;
          } else if (left && below) {
            return labelBorder.botL;
          } else if (right && above) {
            return labelBorder.topR;
          } else if (right && below) {
            return labelBorder.botR;
          } else if (left) {
            return labelBorder.midL;
          } else if (right) {
            return labelBorder.midR;
          }
        }
      }
    };
    links = [];
    i = 0;
    while (i < plotData.getLen()) {
      newLinkPt = newPtOnLabelBorder(lab[i], pts[i]);
      if (newLinkPt != null) {
        links.push({
          x1: pts[i].x,
          y1: pts[i].y,
          x2: newLinkPt[0],
          y2: newLinkPt[1],
          width: 0.8
        });
      }
      i++;
    }
    this.outerSvg.selectAll('.link').data(links).enter().append('line').attr('x1', function(d) {
      return d.x1;
    }).attr('y1', function(d) {
      return d.y1;
    }).attr('x2', function(d) {
      return d.x2;
    }).attr('y2', function(d) {
      return d.y2;
    }).attr('stroke-width', function(d) {
      return d.width;
    }).attr('stroke', 'gray');
    labels_svg.transition().duration(800).attr('x', function(d) {
      return d.x;
    }).attr('y', function(d) {
      return d.y;
    });
    yAxisPadding = 35;
    xAxisPadding = 40;
    axisLabels = [
      {
        x: viewBoxDim.x + viewBoxDim.width / 2,
        y: viewBoxDim.y + viewBoxDim.height + xAxisPadding,
        text: 'Dimension 1 (64%)',
        anchor: 'middle',
        transform: 'rotate(0)'
      }, {
        x: viewBoxDim.x - yAxisPadding,
        y: viewBoxDim.y + viewBoxDim.height / 2,
        text: 'Dimension 2 (24%)',
        anchor: 'middle',
        transform: 'rotate(270,' + (viewBoxDim.x - yAxisPadding) + ', ' + (viewBoxDim.y + viewBoxDim.height / 2) + ')'
      }
    ];
    legendPtRad = 6;
    legendLeftPadding = 30;
    heightOfRow = 25;
    legendStartY = Math.max(viewBoxDim.y + viewBoxDim.height / 2 - heightOfRow * legend.length / 2 + legendPtRad, viewBoxDim.y + legendPtRad);
    i = 0;
    while (i < legend.length) {
      li = legend[i];
      li['r'] = legendPtRad;
      li['cx'] = viewBoxDim.x + viewBoxDim.width + legendLeftPadding;
      li['cy'] = legendStartY + i * heightOfRow;
      li['x'] = li['cx'] + 15;
      li['y'] = li['cy'] + li['r'];
      li['anchor'] = 'start';
      i++;
    }
    this.outerSvg.selectAll('.axis-label').data(axisLabels).enter().append('text').attr('x', function(d) {
      return d.x;
    }).attr('y', function(d) {
      return d.y;
    }).attr('font-family', 'Arial').attr('text-anchor', function(d) {
      return d.anchor;
    }).attr('transform', function(d) {
      return d.transform;
    }).text(function(d) {
      return d.text;
    }).style('font-weight', 'bold');
    this.outerSvg.selectAll('.legend-pts').data(legend).enter().append('circle').attr('cx', function(d) {
      return d.cx;
    }).attr('cy', function(d) {
      return d.cy;
    }).attr('r', function(d) {
      return d.r;
    }).attr('fill', function(d) {
      return d.color;
    });
    return this.outerSvg.selectAll('.legend-text').data(legend).enter().append('text').attr('x', function(d) {
      return d.x;
    }).attr('y', function(d) {
      return d.y;
    }).attr('font-family', 'Arial Narrow').text(function(d) {
      return d.text;
    }).attr('text-anchor', function(d) {
      return d.anchor;
    });
  };

  return LabeledScatter;

})(RhtmlSvgWidget);
