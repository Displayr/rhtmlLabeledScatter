// Generated by CoffeeScript 1.8.0
var State,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

State = (function() {
  function State(stateObj, stateChangedCallback, X, Y, label) {
    var storedLabel, storedX, storedY;
    this.stateObj = stateObj;
    this.stateChangedCallback = stateChangedCallback;
    this.getUserPositionedLabIds = __bind(this.getUserPositionedLabIds, this);
    this.updateLabelsWithUserPositionedData = __bind(this.updateLabelsWithUserPositionedData, this);
    this.pushUserPositionedLabel = __bind(this.pushUserPositionedLabel, this);
    this.isLegendPtsSynced = __bind(this.isLegendPtsSynced, this);
    this.getLegendPts = __bind(this.getLegendPts, this);
    this.pullLegendPt = __bind(this.pullLegendPt, this);
    this.pushLegendPt = __bind(this.pushLegendPt, this);
    this.saveToState = __bind(this.saveToState, this);
    this.getStored = __bind(this.getStored, this);
    this.isStoredInState = __bind(this.isStoredInState, this);
    if (!(_.isObject(this.stateObj))) {
      this.stateObj = {};
    }
    storedX = this.isStoredInState('X') ? this.getStored('X') : [];
    storedY = this.isStoredInState('Y') ? this.getStored('Y') : [];
    storedLabel = this.isStoredInState('label') ? this.getStored('label') : [];
    if (!(_.isEqual(storedX, X) && _.isEqual(storedY, Y) && _.isEqual(storedLabel, label))) {
      this.stateObj = {};
      this.saveToState('X', X);
      this.saveToState('Y', Y);
      this.saveToState('label', label);
    }
    this.legendPts = this.isStoredInState('legendPts') ? _.uniq(this.getStored('legendPts')) : [];
    this.userPositionedLabs = this.isStoredInState('userPositionedLabs') ? this.getStored('userPositionedLabs') : [];
  }

  State.prototype.isStoredInState = function(key) {
    return _.has(this.stateObj, key);
  };

  State.prototype.getStored = function(key) {
    if (this.isStoredInState(key)) {
      return this.stateObj[key];
    }
  };

  State.prototype.saveToState = function(key, val) {
    if (_.isFunction(this.stateChangedCallback)) {
      this.stateObj[key] = val;
      return this.stateChangedCallback(this.stateObj);
    }
  };

  State.prototype.pushLegendPt = function(id) {
    this.legendPts.push(id);
    _.remove(this.userPositionedLabs, function(e) {
      return e.id === id;
    });
    this.saveToState('legendPts', this.legendPts);
    return this.saveToState('userPositionedLabs', this.userPositionedLabs);
  };

  State.prototype.pullLegendPt = function(id) {
    _.pull(this.legendPts, id);
    return this.saveToState('legendPts', this.legendPts);
  };

  State.prototype.getLegendPts = function() {
    return this.legendPts;
  };

  State.prototype.isLegendPtsSynced = function(currLegendPts) {
    return this.legendPts.length === 0 || this.legendPts.length === currLegendPts.length;
  };

  State.prototype.pushUserPositionedLabel = function(id, labx, laby, viewBoxDim) {
    _.remove(this.userPositionedLabs, function(e) {
      return e.id === id;
    });
    this.userPositionedLabs.push({
      id: id,
      x: (labx - viewBoxDim.x) / viewBoxDim.width,
      y: (laby - viewBoxDim.y) / viewBoxDim.height
    });
    return this.saveToState('userPositionedLabs', this.userPositionedLabs);
  };

  State.prototype.updateLabelsWithUserPositionedData = function(lab, viewBoxDim) {
    var i, l, newX, newY, posLab, _i, _len, _results;
    if (!_.isEmpty(this.userPositionedLabs)) {
      _results = [];
      for (i = _i = 0, _len = lab.length; _i < _len; i = ++_i) {
        l = lab[i];
        posLab = _.find(this.userPositionedLabs, function(e) {
          return e.id === lab[i].id;
        });
        if (posLab != null) {
          newX = (posLab.x * viewBoxDim.width) + viewBoxDim.x;
          newY = (posLab.y * viewBoxDim.height) + viewBoxDim.y;
          l.x = newX;
          _results.push(l.y = newY);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  State.prototype.getUserPositionedLabIds = function() {
    return _.map(this.userPositionedLabs, function(e) {
      return e.id;
    });
  };

  return State;

})();
