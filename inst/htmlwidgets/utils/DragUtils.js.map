{"version":3,"file":"utils/DragUtils.es6.js","names":[],"mappings":"","sources":["utils/DragUtils.es6.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DragUtils = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global d3 */\n/* global _ */\n\n// import _ from 'lodash';\n\nvar DragUtils = function () {\n  function DragUtils() {\n    _classCallCheck(this, DragUtils);\n  }\n\n  // address \"extreme\" coupling to plot\n  DragUtils.getLabelDragAndDrop = function getLabelDragAndDrop(plot) {\n    var showTrendLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var dragStart = function dragStart() {\n      return plot.svg.selectAll('.link').remove();\n    };\n\n    var dragMove = function dragMove() {\n      d3.select(this).attr('x', d3.event.x).attr('y', d3.event.y);\n\n      // Save the new location of text so links can be redrawn\n      var id = d3.select(this).attr('id');\n      var label = _.find(plot.data.lab, function (l) {\n        return l.id === Number(id);\n      });\n      if ($(this).prop('tagName') === 'image') {\n        label.x = d3.event.x + label.width / 2;\n        label.y = d3.event.y + label.height;\n      } else {\n        label.x = d3.event.x;\n        label.y = d3.event.y;\n      }\n    };\n\n    var dragEnd = function dragEnd() {\n      // If label is dragged out of viewBox, remove the lab and add to legend\n      var id = Number(d3.select(this).attr('id'));\n      var lab = _.find(plot.data.lab, function (l) {\n        return l.id === id;\n      });\n      var anc = _.find(plot.data.pts, function (a) {\n        return a.id === id;\n      });\n\n      if (plot.data.isOutsideViewBox(lab) && !showTrendLine) {\n        // Element dragged off plot\n        plot.data.addElemToLegend(id);\n        plot.state.pushLegendPt(id);\n        plot.resetPlotAfterDragEvent();\n        //  TODO KZ what does this statement mean ?\n      } else if (lab.x - lab.width / 2 < anc.x && anc.x < lab.x + lab.width / 2 && lab.y > anc.y && anc.y > lab.y - lab.height) {\n        plot.svg.select('#anc-' + id).attr('fill-opacity', 0);\n      } else {\n        plot.state.pushUserPositionedLabel(id, lab.x, lab.y, plot.viewBoxDim);\n        plot.svg.select('#anc-' + id).attr('fill-opacity', function (d) {\n          return d.fillOpacity;\n        });\n        if (!showTrendLine) {\n          plot.drawLinks();\n        }\n      }\n    };\n\n    return d3.behavior.drag().origin(function () {\n      return {\n        x: d3.select(this).attr('x'),\n        y: d3.select(this).attr('y')\n      };\n    }).on('dragstart', dragStart).on('drag', dragMove).on('dragend', dragEnd);\n  };\n\n  DragUtils.getLegendLabelDragAndDrop = function getLegendLabelDragAndDrop(plot, data) {\n    var dragStart = _.noop;\n\n    var dragMove = function dragMove() {\n      d3.select(this).attr('x', d3.select(this).x = d3.event.x).attr('y', d3.select(this).y = d3.event.y);\n\n      // Save the new location of text so links can be redrawn\n      var id = d3.select(this).attr('id').split('legend-')[1];\n      var legendPt = _.find(data.legendPts, function (l) {\n        return l.id === Number(id);\n      });\n      legendPt.lab.x = d3.event.x;\n      legendPt.lab.y = d3.event.y;\n    };\n\n    var dragEnd = function dragEnd() {\n      var id = Number(d3.select(this).attr('id').split('legend-')[1]);\n      var legendPt = _.find(data.legendPts, function (l) {\n        return l.id === Number(id);\n      });\n      if (plot.data.isLegendPtOutsideViewBox(legendPt.lab)) {\n        d3.select(this).attr('x', d3.select(this).x = legendPt.x).attr('y', d3.select(this).y = legendPt.y);\n      } else {\n        // Element dragged onto plot\n        plot.data.removeElemFromLegend(id);\n        plot.state.pullLegendPt(id);\n        plot.resetPlotAfterDragEvent();\n      }\n    };\n\n    return d3.behavior.drag().origin(function () {\n      return {\n        x: d3.select(this).attr('x'),\n        y: d3.select(this).attr('y')\n      };\n    }).on('dragstart', dragStart).on('drag', dragMove).on('dragend', dragEnd);\n  };\n\n  return DragUtils;\n}();\n\nmodule.exports = DragUtils;\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}