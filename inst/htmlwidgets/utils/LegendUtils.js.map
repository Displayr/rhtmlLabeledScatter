{"version":3,"file":"utils/LegendUtils.es6.js","names":[],"mappings":"","sources":["utils/LegendUtils.es6.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.LegendUtils = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LegendUtils = function () {\n  function LegendUtils() {\n    _classCallCheck(this, LegendUtils);\n  }\n\n  LegendUtils.getExponentialShortForm = function getExponentialShortForm(val) {\n    return this.exponentialShortForms[val];\n  };\n\n  LegendUtils.normalizedZtoRadius = function normalizedZtoRadius(viewBoxDim, normZval) {\n    return Math.sqrt(viewBoxDim.width * viewBoxDim.height / 16 / Math.PI) * normZval;\n  };\n\n  // KZ TODO remove 'data' side effect\n  // TODO Po describe why\n\n\n  LegendUtils.calcZQuartiles = function calcZQuartiles(data, maxZ) {\n    var getZLabel = function getZLabel(val, max, precision) {\n      return Math.sqrt((max * val).toPrecision(precision) / max / Math.PI);\n    };\n\n    var getExponential = function getExponential(num) {\n      return num.toExponential().split('e')[1];\n    };\n\n    // Quartiles that determine size of each of the legend bubbles in proportion to maximum Z val\n    var topQ = 0.8;\n    var midQ = 0.4;\n    var botQ = 0.1;\n\n    var topQuartileZ = maxZ * topQ;\n\n    // VIS-262: Compensate for inconsistent sig figs in legend\n    var differenceInExponentials = Math.abs(getExponential(topQuartileZ) - getExponential(midQ * topQuartileZ));\n    var precision = differenceInExponentials < 1 ? 1 : 2;\n    topQuartileZ = topQuartileZ.toPrecision(precision);\n\n    // Calculations necessary to figure out which short form to apply\n    var exp = Math.log(topQuartileZ);\n    exp = Math.round(exp * 100000) / 100000;\n    exp /= Math.LN10;\n\n    var expDecimal = exp % 1;\n    exp -= expDecimal;\n    var digitsBtwnShortForms = exp % 3;\n    exp -= digitsBtwnShortForms;\n    var expShortForm = this.getExponentialShortForm(exp) || '';\n\n    var topQuartileVal = topQuartileZ / 10 ** exp;\n\n    data.Zquartiles = {\n      top: {\n        val: topQuartileVal + expShortForm,\n        lab: getZLabel(topQ, maxZ, precision)\n      },\n      mid: {\n        val: (topQuartileZ * midQ).toPrecision(1) / 10 ** exp,\n        lab: getZLabel(midQ, topQuartileZ, 1)\n      },\n      bot: {\n        val: (topQuartileZ * botQ).toPrecision(1) / 10 ** exp,\n        lab: getZLabel(botQ, topQuartileZ, 1)\n      }\n    };\n  };\n\n  // TODO KZ remove side effect, just return the normalized array\n  // TODO Po describe why\n\n\n  LegendUtils.normalizeZValues = function normalizeZValues(data, maxZ) {\n    data.normZ = data.Z.map(function (z) {\n      var normalizedArea = z / maxZ;\n      return Math.sqrt(normalizedArea / Math.PI);\n    });\n  };\n\n  // TODO KZ remove side effect, just return the normalized array\n\n\n  LegendUtils.setupBubbles = function setupBubbles(data) {\n    var viewBoxDim = data.viewBoxDim,\n        Zquartiles = data.Zquartiles,\n        legendDim = data.legendDim;\n\n\n    var rTop = this.normalizedZtoRadius(viewBoxDim, Zquartiles.top.lab);\n    var rMid = this.normalizedZtoRadius(viewBoxDim, Zquartiles.mid.lab);\n    var rBot = this.normalizedZtoRadius(viewBoxDim, Zquartiles.bot.lab);\n    var cx = viewBoxDim.x + viewBoxDim.width + legendDim.width / 2;\n    var viewBoxYBottom = viewBoxDim.y + viewBoxDim.height;\n    var bubbleTextPadding = 5;\n\n    data.legendBubblesMaxWidth = rTop * 2;\n\n    data.legendBubbles = [{\n      cx: cx,\n      cy: viewBoxYBottom - rTop,\n      r: rTop,\n      x: cx,\n      y: viewBoxYBottom - 2 * rTop - bubbleTextPadding,\n      text: Zquartiles.top.val\n    }, {\n      cx: cx,\n      cy: viewBoxYBottom - rMid,\n      r: rMid,\n      x: cx,\n      y: viewBoxYBottom - 2 * rMid - bubbleTextPadding,\n      text: Zquartiles.mid.val\n    }, {\n      cx: cx,\n      cy: viewBoxYBottom - rBot,\n      r: rBot,\n      x: cx,\n      y: viewBoxYBottom - 2 * rBot - bubbleTextPadding,\n      text: Zquartiles.bot.val\n    }];\n\n    data.legendBubblesTitle = [{\n      x: cx,\n      y: viewBoxYBottom - 2 * rTop - bubbleTextPadding\n    }];\n  };\n\n  _createClass(LegendUtils, null, [{\n    key: 'exponentialShortForms',\n    get: function get() {\n      return {\n        3: 'k', // thousand\n        6: 'm', // million\n        9: 'b', // billion\n        12: 't', // trillion\n        15: 'qd', // quadrillion\n        18: 'qt', // quintillion\n        21: 'sxt', // sextillion\n        24: 'spt', // septillion\n        27: 'oct', // octillian\n        30: 'nn', // nonillian\n        33: 'dc' };\n    }\n  }]);\n\n  return LegendUtils;\n}();\n\nmodule.exports = LegendUtils;\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}