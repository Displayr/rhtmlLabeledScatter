// Generated by CoffeeScript 1.8.0
var PlotColors,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

PlotColors = (function() {
  function PlotColors(plotData) {
    var group, i, newColor;
    this.plotData = plotData;
    this.getFillOpacity = __bind(this.getFillOpacity, this);
    this.getColor = __bind(this.getColor, this);
    this.getNewColor = __bind(this.getNewColor, this);
    this.getColorFromGroup = __bind(this.getColorFromGroup, this);
    group = this.plotData.group;
    this.plotData.legendGroups = [];
    this.groupToColorMap = {};
    if (group != null) {
      i = 0;
      while (i < group.length) {
        if (!(_.some(this.plotData.legendGroups, function(e) {
          return e.text === group[i];
        }))) {
          newColor = this.getNewColor(this.plotData.cIndex);
          this.plotData.cIndex++;
          this.plotData.legendGroups.push({
            text: group[i],
            color: newColor,
            r: this.plotData.legendDim.ptRadius,
            anchor: 'start',
            fillOpacity: this.getFillOpacity(this.plotData.transparency)
          });
          this.groupToColorMap[group[i]] = newColor;
        }
        i++;
      }
    }
  }

  PlotColors.prototype.getColorFromGroup = function(group) {
    return this.groupToColorMap[group];
  };

  PlotColors.prototype.getNewColor = function(index) {
    return this.plotData.colorWheel[index % this.plotData.colorWheel.length];
  };

  PlotColors.prototype.getColor = function(i) {
    if (Utils.get().isArr(this.plotData.group)) {
      return this.getColorFromGroup(this.plotData.group[i]);
    } else {
      return this.getNewColor(0);
    }
  };

  PlotColors.prototype.getFillOpacity = function(transparency) {
    if (Utils.get().isNum(transparency)) {
      return transparency;
    } else if (Utils.get().isArr(this.plotData.Z)) {
      return 0.3;
    } else {
      return 1;
    }
  };

  return PlotColors;

})();
