// Generated by CoffeeScript 1.8.0
var LinkUtils;

LinkUtils = (function() {
  var LU, instance;

  function LinkUtils() {}

  instance = null;

  LinkUtils.get = function() {
    if (this.instance == null) {
      instance = new LU();
    }
    return instance;
  };

  LU = (function() {
    function LU() {}

    LU.prototype.getNewPtOnLabelBorder = function(label, anchor, anchor_array) {
      var a, above, aboveMid, abovePadded, ambiguityFactor, ancB, ancL, ancNearby, ancR, ancT, below, belowMid, belowPadded, centered, labelBorder, labelXleft, labelXmid, labelXright, labelYbot, labelYmid, labelYtop, left, leftPadded, padB, padL, padR, padT, paddedCenter, padding, right, rightPadded, _i, _len;
      labelXmid = label.x;
      labelXleft = label.x - label.width / 2;
      labelXright = label.x + label.width / 2;
      labelYbot = label.y;
      labelYtop = label.y - label.height;
      labelYmid = label.y - label.height / 2;
      ancL = anchor.x - anchor.r;
      ancR = anchor.x + anchor.r;
      ancT = anchor.y + anchor.r;
      ancB = anchor.y - anchor.r;
      labelBorder = {
        botL: [labelXleft, labelYbot],
        botC: [labelXmid, labelYbot],
        botR: [labelXright, labelYbot],
        topL: [labelXleft, labelYtop + 7],
        topC: [labelXmid, labelYtop + 7],
        topR: [labelXright, labelYtop + 7],
        midL: [labelXleft, labelYmid],
        midR: [labelXright, labelYmid]
      };
      padding = 10;
      centered = (ancR > labelXleft) && (ancL < labelXright);
      paddedCenter = (ancR > labelXleft - padding) && (ancL < labelXright + padding);
      abovePadded = ancB < labelYtop - padding;
      above = ancB < labelYtop;
      aboveMid = anchor.y < labelYmid;
      belowPadded = ancT > labelYbot + padding;
      below = ancT > labelYbot;
      belowMid = anchor.y >= labelYmid;
      left = ancR < labelXleft;
      right = ancL > labelXright;
      leftPadded = ancR < labelXleft - padding;
      rightPadded = ancL > labelXright + padding;
      if (centered && abovePadded) {
        return labelBorder.topC;
      } else if (centered && belowPadded) {
        return labelBorder.botC;
      } else if (above && left) {
        return labelBorder.topL;
      } else if (above && right) {
        return labelBorder.topR;
      } else if (below && left) {
        return labelBorder.botL;
      } else if (below && right) {
        return labelBorder.botR;
      } else if (leftPadded) {
        return labelBorder.midL;
      } else if (rightPadded) {
        return labelBorder.midR;
      } else {
        ambiguityFactor = 10;
        padL = labelBorder.topL[0] - ambiguityFactor;
        padR = labelBorder.topR[0] + ambiguityFactor;
        padT = labelBorder.topL[1] - ambiguityFactor;
        padB = labelBorder.botR[1] + ambiguityFactor;
        ancNearby = 0;
        for (_i = 0, _len = anchor_array.length; _i < _len; _i++) {
          a = anchor_array[_i];
          if ((a.x > padL && a.x < padR) && (a.y > padT && a.y < padB)) {
            ancNearby++;
          }
        }
        if (ancNearby > 1) {
          if (!left && !right && !above && !below) {
            return labelBorder.botC;
          } else if (centered && above) {
            return labelBorder.topC;
          } else if (centered && below) {
            return labelBorder.botC;
          } else if (left && above) {
            return labelBorder.topL;
          } else if (left && below) {
            return labelBorder.botL;
          } else if (right && above) {
            return labelBorder.topR;
          } else if (right && below) {
            return labelBorder.botR;
          } else if (left) {
            return labelBorder.midL;
          } else if (right) {
            return labelBorder.midR;
          }
        }
      }
    };

    LU.prototype.getPtOnAncBorder = function(cx, cy, cr, x, y) {
      var adj, angle, dx, dy, final_x, final_y, opp;
      opp = Math.abs(cy - y);
      adj = Math.abs(cx - x);
      angle = Math.atan(opp / adj);
      dx = cr * Math.cos(angle);
      dy = cr * Math.sin(angle);
      final_x = x < cx ? cx - dx : cx + dx;
      final_y = y < cy ? cy - dy : cy + dy;
      return [final_x, final_y];
    };

    return LU;

  })();

  return LinkUtils;

})();
