// Generated by CoffeeScript 1.8.0
var Template,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Template = (function() {
  Template.templateIndex = -1;

  function Template(el, width, height) {
    this._onClick = __bind(this._onClick, this);
    Template.templateIndex++;
    this.rootElement = _.has(el, 'length') ? el[0] : el;
    this.initialWidth = width;
    this.initialHeight = height;
    this.stateListeners = [];
    this._initializeState({
      selected: null
    });
  }

  Template.prototype.setConfig = function(config) {
    this.config = config;
    if (!this.config['table-id']) {
      return this.config['table-id'] = "template-" + Template.templateIndex;
    }
  };

  Template.prototype.draw = function() {
    this._manipulateRootElementSize();
    this._addRootSvgToRootElement();
    return this._redraw();
  };

  Template.prototype._redraw = function() {
    var allCells, data, enteringCells;
    data = [
      {
        color: 'red',
        name: 'red',
        x: 0,
        y: 0
      }, {
        color: 'blue',
        name: 'blue',
        x: this.initialWidth / 2,
        y: 0
      }, {
        color: 'green',
        name: 'green',
        x: 0,
        y: this.initialHeight / 2
      }, {
        color: 'orange',
        name: 'orange',
        x: this.initialWidth / 2,
        y: this.initialHeight / 2
      }
    ];
    allCells = this.outerSvg.selectAll('.node').data(data);
    enteringCells = allCells.enter().append('g').attr('class', 'node').attr('transform', function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    enteringCells.append('rect').attr('width', this.initialWidth / 2).attr('height', this.initialHeight / 2).attr('class', 'rect');
    enteringCells.append('text').attr('class', 'text');
    this._updateText();
    return this._updateRectangles();
  };

  Template.prototype._updateText = function() {
    var allTexts;
    return allTexts = this.outerSvg.selectAll('.text').attr('x', (function(_this) {
      return function(d) {
        return _this.initialWidth / 4;
      };
    })(this)).attr('y', (function(_this) {
      return function(d) {
        return _this.initialHeight / 4;
      };
    })(this)).style('text-anchor', 'middle').style('alignment-baseline', 'central').style('dominant-baseline', 'central').style('fill', 'white').style('font-weight', (function(_this) {
      return function(d) {
        if (d.name === _this.state.selected) {
          return 900;
        }
        return 200;
      };
    })(this)).style('font-size', (function(_this) {
      return function(d) {
        if (d.name === _this.state.selected) {
          return 36;
        }
        return 18;
      };
    })(this)).text(function(d) {
      return d.name;
    });
  };

  Template.prototype._updateRectangles = function() {
    var allRects;
    return allRects = this.outerSvg.selectAll('.rect').attr('class', function(d) {
      return "rect " + d.name;
    }).attr('fill', (function(_this) {
      return function(d) {
        return d.color;
      };
    })(this)).attr('stroke', 'black').attr('stroke-width', (function(_this) {
      return function(d) {
        if (d.name === _this.state.selected) {
          return 6;
        }
        return 0;
      };
    })(this)).on('click', this._onClick);
  };

  Template.prototype.resize = function(width, height) {};

  Template.prototype._onClick = function(d) {
    return this._updateState('selected', d.name);
  };

  Template.prototype._initializeState = function(newState) {
    return this.state = newState;
  };

  Template.prototype._putState = function(newState) {
    this.state = newState;
    this.updateStateListeners();
    return this._redraw();
  };

  Template.prototype._updateState = function(k, v) {
    this.state[k] = v;
    this.updateStateListeners();
    return this._redraw();
  };

  Template.prototype.getState = function() {
    return this.state;
  };

  Template.prototype.setState = function(newState) {
    var err;
    if (_.isString(newState)) {
      try {
        this.state = JSON.parse(newState);
      } catch (_error) {
        err = _error;
        throw new Error('json parse error in setState(#newState): ' + err);
      }
    } else {
      this.state = newState;
    }
    this.updateStateListeners();
    return this._redraw();
  };

  Template.prototype.registerStateListener = function(listener) {
    if (!_.isArray(this.stateListeners)) {
      this.stateListeners = [];
    }
    return this.stateListeners.push(listener);
  };

  Template.prototype.updateStateListeners = function() {
    return _.forEach(this.stateListeners, (function(_this) {
      return function(listener) {
        return listener(_this.state);
      };
    })(this));
  };

  Template.prototype._manipulateRootElementSize = function() {
    $(this.rootElement).attr('style', '');
    if (this.config['resizable']) {
      return $(this.rootElement).width('100%').height('100%');
    } else {
      return $(this.rootElement).width(this.initialWidth).height(this.initialHeight);
    }
  };

  Template.prototype._addRootSvgToRootElement = function() {
    var anonSvg;
    anonSvg = $('<svg class="template-outer-svg">').addClass(this.config['table-id']).attr('id', this.config['table-id']).attr('width', '100%').attr('height', '100%');
    $(this.rootElement).append(anonSvg);
    this.outerSvg = d3.select(anonSvg[0]);
    document.getElementsByClassName("template-outer-svg")[0].setAttribute('viewBox', "0 0 " + this.initialWidth + " " + this.initialHeight);
    if (this.config['preserveAspectRatio'] != null) {
      document.getElementsByClassName("template-outer-svg")[0].setAttribute('preserveAspectRatio', this.config['preserveAspectRatio']);
    }
    return null;
  };

  return Template;

})();
