(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Links = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Links = function () {
  Links.prototype._labIsInsideBubblePt = function _labIsInsideBubblePt(lab, pt) {
    var labLeftBorder = lab.x - lab.width / 2;
    var labRightBorder = lab.x + lab.width / 2;
    var labBotBorder = lab.y;
    var labTopBorder = lab.y - lab.height;

    return labRightBorder < pt.x + pt.r && labLeftBorder > pt.x - pt.r && labBotBorder < pt.y + pt.r && labTopBorder > pt.y - pt.r;
  };

  function Links(pts, lab) {
    _classCallCheck(this, Links);

    this.getLinkData = this.getLinkData.bind(this);
    this.getNewPtOnLogoLabelBorder = this.getNewPtOnLogoLabelBorder.bind(this);
    this.getNewPtOnTxtLabelBorder = this.getNewPtOnTxtLabelBorder.bind(this);
    this.getPtOnAncBorder = this.getPtOnAncBorder.bind(this);

    var _labIsText = function _labIsText(labelData) {
      return labelData.url === '';
    };

    this.links = [];
    for (var i = 0; i < pts.length; i++) {
      var pt = pts[i];
      var newLinkPt = null;
      if (!this._labIsInsideBubblePt(lab[i], pt)) {
        if (_labIsText(lab[i])) {
          newLinkPt = this.getNewPtOnTxtLabelBorder(lab[i], pt, pts);
        } else {
          newLinkPt = this.getNewPtOnLogoLabelBorder(lab[i], pt, pts);
        }
      }

      if (newLinkPt != null) {
        var ancBorderPt = this.getPtOnAncBorder(pt.x, pt.y, pt.r, newLinkPt[0], newLinkPt[1]);
        this.links.push({
          x1: ancBorderPt[0],
          y1: ancBorderPt[1],
          x2: newLinkPt[0],
          y2: newLinkPt[1],
          width: 1,
          color: pt.color
        });
      }
    }
  }

  Links.prototype.getLinkData = function getLinkData() {
    return this.links;
  };

  Links.prototype.getNewPtOnLogoLabelBorder = function getNewPtOnLogoLabelBorder(label, anchor) {
    // Don't draw a link if anc is inside logo
    var region = void 0;
    if (label.x - label.width / 2 < anchor.x && anchor.x < label.x + label.width / 2 && label.y - label.height < anchor.y && anchor.y < label.y) {
      return null;
    }

    // Calculations reference - http://stackoverflow.com/questions/4061576/finding-points-on-a-rectangle-at-a-given-angle
    var a = label.width;
    var b = label.height;
    var labx = label.x;
    var laby = label.y - label.height / 2;

    var dx = anchor.x - labx;
    var dy = anchor.y - laby;
    var angle = Math.atan(dy / dx);

    if (-Math.atan(b / a) < angle && angle < Math.atan(b / a)) {
      region = 1;
    } else if (Math.atan(b / a) < angle && angle < Math.PI - Math.atan(b / a)) {
      region = 2;
    } else if (Math.PI - Math.atan(b / a) < angle && angle < Math.PI + Math.atan(b / a)) {
      region = 3;
    } else if (Math.PI + Math.atan(b / a) < angle || angle < -Math.atan(b / a)) {
      region = 4;
    }

    if (region === 1 || region === 3) {
      if (dx > 0) {
        return [labx + a / 2, a / 2 * Math.tan(angle) + laby];
      } else {
        return [labx - a / 2, -(a / 2 * Math.tan(angle)) + laby];
      }
    } else if (region === 2 || region === 4) {
      if (dy > 0) {
        return [labx + b / (2 * Math.tan(angle)), b / 2 + laby];
      } else {
        return [labx - b / (2 * Math.tan(angle)), -b / 2 + laby];
      }
    }

    return null;
  };

  // calc the links from anc to label text if ambiguous


  Links.prototype.getNewPtOnTxtLabelBorder = function getNewPtOnTxtLabelBorder(label, anchor, anchorArray) {
    var labelXmid = label.x;
    var labelXleft = label.x - label.width / 2;
    var labelXright = label.x + label.width / 2;

    var labelYbot = label.y;
    var labelYtop = label.y - label.height;
    var labelYmid = label.y - label.height / 2;

    var ancL = anchor.x - anchor.r;
    var ancR = anchor.x + anchor.r;
    var ancT = anchor.y + anchor.r;
    var ancB = anchor.y - anchor.r;

    var labelBorder = {
      botL: [labelXleft, labelYbot],
      botC: [labelXmid, labelYbot],
      botR: [labelXright, labelYbot],
      topL: [labelXleft, labelYtop + 7],
      topC: [labelXmid, labelYtop + 7],
      topR: [labelXright, labelYtop + 7],
      midL: [labelXleft, labelYmid],
      midR: [labelXright, labelYmid]
    };

    var padding = 10;
    var centered = ancR > labelXleft && ancL < labelXright;
    var abovePadded = ancB < labelYtop - padding;
    var above = ancB < labelYtop;
    var belowPadded = ancT > labelYbot + padding;
    var below = ancT > labelYbot;
    var left = ancR < labelXleft;
    var right = ancL > labelXright;
    var leftPadded = ancR < labelXleft - padding;
    var rightPadded = ancL > labelXright + padding;

    if (centered && abovePadded) {
      return labelBorder.topC;
    } else if (centered && belowPadded) {
      return labelBorder.botC;
    } else if (above && left) {
      return labelBorder.topL;
    } else if (above && right) {
      return labelBorder.topR;
    } else if (below && left) {
      return labelBorder.botL;
    } else if (below && right) {
      return labelBorder.botR;
    } else if (leftPadded) {
      return labelBorder.midL;
    } else if (rightPadded) {
      return labelBorder.midR;
    } else {
      // Draw the link if there are any anc nearby
      var ambiguityFactor = 10;
      var padL = labelBorder.topL[0] - ambiguityFactor;
      var padR = labelBorder.topR[0] + ambiguityFactor;
      var padT = labelBorder.topL[1] - ambiguityFactor;
      var padB = labelBorder.botR[1] + ambiguityFactor;
      var ancNearby = 0;
      _(anchorArray).each(function (a) {
        if (a.x > padL && a.x < padR && a.y > padT && a.y < padB) {
          ancNearby++;
        }
      });
      if (ancNearby > 1) {
        if (!left && !right && !above && !below) {
          return labelBorder.botC;
        } else if (centered && above) {
          return labelBorder.topC;
        } else if (centered && below) {
          return labelBorder.botC;
        } else if (left && above) {
          return labelBorder.topL;
        } else if (left && below) {
          return labelBorder.botL;
        } else if (right && above) {
          return labelBorder.topR;
        } else if (right && below) {
          return labelBorder.botR;
        } else if (left) {
          return labelBorder.midL;
        } else if (right) {
          return labelBorder.midR;
        }
      }
    }

    return null;
  };

  Links.prototype.getPtOnAncBorder = function getPtOnAncBorder(cx, cy, cr, x, y) {
    var opp = Math.abs(cy - y);
    var adj = Math.abs(cx - x);
    var angle = Math.atan(opp / adj);

    var dx = cr * Math.cos(angle);
    var dy = cr * Math.sin(angle);

    var finalX = x < cx ? cx - dx : cx + dx;
    var finalY = y < cy ? cy - dy : cy + dy;

    return [finalX, finalY];
  };

  return Links;
}();

module.exports = Links;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=Links.es6.js.map